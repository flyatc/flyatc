/* eslint-disable */

export const AllTypesProps: Record<string, any> = {
  AccessTokenType: "enum" as const,
  AddOn: {
    apps: {},
  },
  AddOnType: "enum" as const,
  AddWireGuardPeerInput: {},
  AllocateIPAddressInput: {
    type: "IPAddressType",
  },
  Allocation: {
    attachedVolumes: {},
    checks: {},
    recentLogs: {},
  },
  App: {
    addOns: {
      type: "AddOnType",
    },
    allocation: {},
    allocations: {},
    builds: {},
    certificate: {},
    certificates: {},
    changes: {},
    deploymentStatus: {},
    healthChecks: {},
    image: {},
    ipAddress: {},
    ipAddresses: {},
    limitedAccessTokens: {},
    machine: {},
    machines: {},
    parseConfig: {
      definition: "JSON",
    },
    release: {},
    releases: {},
    releasesUnprocessed: {},
    vms: {},
    volume: {},
    volumes: {},
  },
  AppCertificate: {
    issued: {},
  },
  AppState: "enum" as const,
  AttachPostgresClusterInput: {},
  AutoscaleRegionConfigInput: {},
  AutoscaleStrategy: "enum" as const,
  BigInt: `scalar.BigInt` as const,
  BillingStatus: "enum" as const,
  BuildFinalImageInput: {
    sizeBytes: "BigInt",
  },
  BuildImageOptsInput: {
    buildArgs: "JSON",
    extraBuildArgs: "JSON",
    builtInSettings: "JSON",
  },
  BuildStrategyAttemptInput: {},
  BuildTimingsInput: {
    buildAndPushMs: "BigInt",
    builderInitMs: "BigInt",
    buildMs: "BigInt",
    contextBuildMs: "BigInt",
    imageBuildMs: "BigInt",
    pushMs: "BigInt",
  },
  BuilderMetaInput: {},
  CaveatSet: `scalar.CaveatSet` as const,
  CheckCertificateInput: {},
  CheckDomainInput: {},
  CheckHTTPVerb: "enum" as const,
  CheckHeaderInput: {},
  CheckInput: {
    type: "CheckType",
    httpMethod: "HTTPMethod",
    httpProtocol: "HTTPProtocol",
    httpHeaders: "CheckHeaderInput",
  },
  CheckJob: {
    locations: {},
    runs: {},
  },
  CheckJobHTTPOptionsInput: {
    verb: "CheckHTTPVerb",
  },
  CheckJobRun: {
    httpResponses: {},
    locations: {},
  },
  CheckState: {
    output: {},
  },
  CheckType: "enum" as const,
  ConfigureRegionsInput: {},
  CreateAddOnInput: {
    type: "AddOnType",
    options: "JSON",
  },
  CreateAndRegisterDomainInput: {},
  CreateAndTransferDomainInput: {},
  CreateAppInput: {
    runtime: "RuntimeType",
  },
  CreateBuildInput: {
    imageOpts: "BuildImageOptsInput",
  },
  CreateCheckJobInput: {
    httpOptions: "CheckJobHTTPOptionsInput",
  },
  CreateCheckJobRunInput: {},
  CreateDNSPortalInput: {},
  CreateDNSPortalSessionInput: {},
  CreateDNSRecordInput: {
    type: "DNSRecordType",
  },
  CreateDelegatedWireGuardTokenInput: {},
  CreateDoctorReportInput: {
    data: "JSON",
  },
  CreateDomainInput: {},
  CreateExtensionTosAgreementInput: {},
  CreateLimitedAccessTokenInput: {
    profileParams: "JSON",
  },
  CreateOrganizationInput: {},
  CreateOrganizationInvitationInput: {},
  CreatePostgresClusterDatabaseInput: {},
  CreatePostgresClusterUserInput: {},
  CreateReleaseInput: {
    definition: "JSON",
    strategy: "DeploymentStrategy",
  },
  CreateTemplateDeploymentInput: {
    template: "JSON",
    variables: "PropertyInput",
  },
  CreateThirdPartyConfigurationInput: {
    caveats: "CaveatSet",
    flyctlLevel: "ThirdPartyConfigurationLevel",
    uiexLevel: "ThirdPartyConfigurationLevel",
    customLevel: "ThirdPartyConfigurationLevel",
  },
  CreateVolumeInput: {
    fsType: "FsTypeType",
  },
  CreateVolumeSnapshotInput: {},
  DNSRecordChangeAction: "enum" as const,
  DNSRecordChangeInput: {
    action: "DNSRecordChangeAction",
    type: "DNSRecordType",
  },
  DNSRecordType: "enum" as const,
  DeleteAddOnInput: {},
  DeleteDNSPortalInput: {},
  DeleteDNSPortalSessionInput: {},
  DeleteDNSRecordInput: {},
  DeleteDelegatedWireGuardTokenInput: {},
  DeleteDeploymentSourceInput: {},
  DeleteDomainInput: {},
  DeleteHealthCheckHandlerInput: {},
  DeleteLimitedAccessTokenInput: {},
  DeleteOrganizationInput: {},
  DeleteOrganizationInvitationInput: {},
  DeleteOrganizationMembershipInput: {},
  DeleteRemoteBuilderInput: {},
  DeleteThirdPartyConfigurationInput: {},
  DeleteVolumeInput: {},
  DeployImageInput: {
    services: "ServiceInput",
    definition: "JSON",
    strategy: "DeploymentStrategy",
  },
  DeploymentStrategy: "enum" as const,
  DetachPostgresClusterInput: {},
  DischargeRootTokenInput: {},
  Domain: {
    dnsRecords: {},
  },
  DomainDNSStatus: "enum" as const,
  DomainRegistrationStatus: "enum" as const,
  DummyWireGuardPeerInput: {},
  EnablePostgresConsulInput: {},
  EnsureMachineRemoteBuilderInput: {},
  EstablishSSHKeyInput: {},
  ExportDNSZoneInput: {},
  ExtendVolumeInput: {},
  FinishBuildInput: {
    strategiesAttempted: "BuildStrategyAttemptInput",
    builderMeta: "BuilderMetaInput",
    finalImage: "BuildFinalImageInput",
    timings: "BuildTimingsInput",
  },
  ForkVolumeInput: {},
  FsTypeType: "enum" as const,
  GrantPostgresClusterUserAccessInput: {},
  HTTPMethod: "enum" as const,
  HTTPProtocol: "enum" as const,
  IPAddressType: "enum" as const,
  ISO8601DateTime: `scalar.ISO8601DateTime` as const,
  ImportDNSZoneInput: {},
  IssueCertificateInput: {},
  JSON: `scalar.JSON` as const,
  KillMachineInput: {},
  LaunchMachineInput: {
    config: "JSON",
  },
  LockAppInput: {},
  LogOutInput: {},
  Macaroon: {
    organizations: {},
  },
  Machine: {
    events: {},
    ips: {},
  },
  MoveAppInput: {},
  Mutations: {
    addCertificate: {},
    addWireGuardPeer: {
      input: "AddWireGuardPeerInput",
    },
    allocateIpAddress: {
      input: "AllocateIPAddressInput",
    },
    attachPostgresCluster: {
      input: "AttachPostgresClusterInput",
    },
    cancelBuild: {},
    checkCertificate: {
      input: "CheckCertificateInput",
    },
    checkDomain: {
      input: "CheckDomainInput",
    },
    configureRegions: {
      input: "ConfigureRegionsInput",
    },
    createAddOn: {
      input: "CreateAddOnInput",
    },
    createAndRegisterDomain: {
      input: "CreateAndRegisterDomainInput",
    },
    createAndTransferDomain: {
      input: "CreateAndTransferDomainInput",
    },
    createApp: {
      input: "CreateAppInput",
    },
    createBuild: {
      input: "CreateBuildInput",
    },
    createCheckJob: {
      input: "CreateCheckJobInput",
    },
    createCheckJobRun: {
      input: "CreateCheckJobRunInput",
    },
    createDelegatedWireGuardToken: {
      input: "CreateDelegatedWireGuardTokenInput",
    },
    createDnsPortal: {
      input: "CreateDNSPortalInput",
    },
    createDnsPortalSession: {
      input: "CreateDNSPortalSessionInput",
    },
    createDnsRecord: {
      input: "CreateDNSRecordInput",
    },
    createDoctorReport: {
      input: "CreateDoctorReportInput",
    },
    createDomain: {
      input: "CreateDomainInput",
    },
    createExtensionTosAgreement: {
      input: "CreateExtensionTosAgreementInput",
    },
    createLimitedAccessToken: {
      input: "CreateLimitedAccessTokenInput",
    },
    createOrganization: {
      input: "CreateOrganizationInput",
    },
    createOrganizationInvitation: {
      input: "CreateOrganizationInvitationInput",
    },
    createPostgresClusterDatabase: {
      input: "CreatePostgresClusterDatabaseInput",
    },
    createPostgresClusterUser: {
      input: "CreatePostgresClusterUserInput",
    },
    createRelease: {
      input: "CreateReleaseInput",
    },
    createTemplateDeployment: {
      input: "CreateTemplateDeploymentInput",
    },
    createThirdPartyConfiguration: {
      input: "CreateThirdPartyConfigurationInput",
    },
    createVolume: {
      input: "CreateVolumeInput",
    },
    createVolumeSnapshot: {
      input: "CreateVolumeSnapshotInput",
    },
    deleteAddOn: {
      input: "DeleteAddOnInput",
    },
    deleteApp: {},
    deleteCertificate: {},
    deleteDelegatedWireGuardToken: {
      input: "DeleteDelegatedWireGuardTokenInput",
    },
    deleteDeploymentSource: {
      input: "DeleteDeploymentSourceInput",
    },
    deleteDnsPortal: {
      input: "DeleteDNSPortalInput",
    },
    deleteDnsPortalSession: {
      input: "DeleteDNSPortalSessionInput",
    },
    deleteDnsRecord: {
      input: "DeleteDNSRecordInput",
    },
    deleteDomain: {
      input: "DeleteDomainInput",
    },
    deleteHealthCheckHandler: {
      input: "DeleteHealthCheckHandlerInput",
    },
    deleteLimitedAccessToken: {
      input: "DeleteLimitedAccessTokenInput",
    },
    deleteOrganization: {
      input: "DeleteOrganizationInput",
    },
    deleteOrganizationInvitation: {
      input: "DeleteOrganizationInvitationInput",
    },
    deleteOrganizationMembership: {
      input: "DeleteOrganizationMembershipInput",
    },
    deleteRemoteBuilder: {
      input: "DeleteRemoteBuilderInput",
    },
    deleteThirdPartyConfiguration: {
      input: "DeleteThirdPartyConfigurationInput",
    },
    deleteVolume: {
      input: "DeleteVolumeInput",
    },
    deployImage: {
      input: "DeployImageInput",
    },
    detachPostgresCluster: {
      input: "DetachPostgresClusterInput",
    },
    dischargeRootToken: {
      input: "DischargeRootTokenInput",
    },
    dummyWireGuardPeer: {
      input: "DummyWireGuardPeerInput",
    },
    enablePostgresConsul: {
      input: "EnablePostgresConsulInput",
    },
    ensureMachineRemoteBuilder: {
      input: "EnsureMachineRemoteBuilderInput",
    },
    establishSshKey: {
      input: "EstablishSSHKeyInput",
    },
    exportDnsZone: {
      input: "ExportDNSZoneInput",
    },
    extendVolume: {
      input: "ExtendVolumeInput",
    },
    finishBuild: {
      input: "FinishBuildInput",
    },
    forkVolume: {
      input: "ForkVolumeInput",
    },
    grantPostgresClusterUserAccess: {
      input: "GrantPostgresClusterUserAccessInput",
    },
    importCertificate: {},
    importDnsZone: {
      input: "ImportDNSZoneInput",
    },
    issueCertificate: {
      input: "IssueCertificateInput",
    },
    killMachine: {
      input: "KillMachineInput",
    },
    launchMachine: {
      input: "LaunchMachineInput",
    },
    lockApp: {
      input: "LockAppInput",
    },
    logOut: {
      input: "LogOutInput",
    },
    moveApp: {
      input: "MoveAppInput",
    },
    nomadToMachinesMigration: {
      input: "NomadToMachinesMigrationInput",
    },
    nomadToMachinesMigrationPrep: {
      input: "NomadToMachinesMigrationPrepInput",
    },
    pauseApp: {
      input: "PauseAppInput",
    },
    registerDomain: {
      input: "RegisterDomainInput",
    },
    releaseIpAddress: {
      input: "ReleaseIPAddressInput",
    },
    removeMachine: {
      input: "RemoveMachineInput",
    },
    removeWireGuardPeer: {
      input: "RemoveWireGuardPeerInput",
    },
    resetAddOnPassword: {
      input: "ResetAddOnPasswordInput",
    },
    restartAllocation: {
      input: "RestartAllocationInput",
    },
    restartApp: {
      input: "RestartAppInput",
    },
    restoreVolumeSnapshot: {
      input: "RestoreVolumeSnapshotInput",
    },
    resumeApp: {
      input: "ResumeAppInput",
    },
    revokePostgresClusterUserAccess: {
      input: "RevokePostgresClusterUserAccessInput",
    },
    saveDeploymentSource: {
      input: "SaveDeploymentSourceInput",
    },
    scaleApp: {
      input: "ScaleAppInput",
    },
    setAppsV2DefaultOn: {
      input: "SetAppsv2DefaultOnInput",
    },
    setPagerdutyHandler: {
      input: "SetPagerdutyHandlerInput",
    },
    setPlatformVersion: {
      input: "SetPlatformVersionInput",
    },
    setSecrets: {
      input: "SetSecretsInput",
    },
    setSlackHandler: {
      input: "SetSlackHandlerInput",
    },
    setVmCount: {
      input: "SetVMCountInput",
    },
    setVmSize: {
      input: "SetVMSizeInput",
    },
    startBuild: {
      input: "StartBuildInput",
    },
    startMachine: {
      input: "StartMachineInput",
    },
    stopAllocation: {
      input: "StopAllocationInput",
    },
    stopMachine: {
      input: "StopMachineInput",
    },
    unlockApp: {
      input: "UnlockAppInput",
    },
    unsetSecrets: {
      input: "UnsetSecretsInput",
    },
    updateAddOn: {
      input: "UpdateAddOnInput",
    },
    updateAutoscaleConfig: {
      input: "UpdateAutoscaleConfigInput",
    },
    updateDnsPortal: {
      input: "UpdateDNSPortalInput",
    },
    updateDnsRecord: {
      input: "UpdateDNSRecordInput",
    },
    updateDnsRecords: {
      input: "UpdateDNSRecordsInput",
    },
    updateOrganizationMembership: {
      input: "UpdateOrganizationMembershipInput",
    },
    updateRelease: {
      input: "UpdateReleaseInput",
    },
    updateRemoteBuilder: {
      input: "UpdateRemoteBuilderInput",
    },
    updateThirdPartyConfiguration: {
      input: "UpdateThirdPartyConfigurationInput",
    },
    validateWireGuardPeers: {
      input: "ValidateWireGuardPeersInput",
    },
  },
  NomadToMachinesMigrationInput: {},
  NomadToMachinesMigrationPrepInput: {},
  Organization: {
    addOns: {
      type: "AddOnType",
    },
    agreedToProviderTos: {},
    apps: {},
    delegatedWireGuardTokens: {},
    dnsPortal: {},
    dnsPortals: {},
    domain: {},
    domains: {},
    extensionSsoLink: {},
    healthCheckHandlers: {},
    healthChecks: {},
    invitations: {},
    limitedAccessTokens: {},
    loggedCertificates: {},
    members: {},
    thirdPartyConfigurations: {},
    wireGuardPeer: {},
    wireGuardPeers: {},
  },
  OrganizationAlertsEnabled: "enum" as const,
  OrganizationMemberRole: "enum" as const,
  OrganizationTrust: "enum" as const,
  OrganizationType: "enum" as const,
  PauseAppInput: {},
  PlatformVersionEnum: "enum" as const,
  Principal: {
    organizations: {},
  },
  PropertyInput: {},
  Queries: {
    accessTokens: {
      type: "AccessTokenType",
    },
    addOn: {},
    addOnPlans: {},
    addOnProvider: {},
    addOns: {
      type: "AddOnType",
    },
    app: {},
    apps: {},
    canPerformBluegreenDeployment: {},
    certificate: {},
    checkJobs: {},
    domain: {},
    ipAddress: {},
    latestImageDetails: {},
    latestImageTag: {},
    machine: {},
    machines: {},
    nearestRegion: {},
    node: {},
    nodes: {},
    organization: {},
    organizations: {
      type: "OrganizationType",
    },
    postgresAttachments: {},
    validateConfig: {
      definition: "JSON",
    },
    volume: {},
  },
  RegisterDomainInput: {},
  ReleaseIPAddressInput: {},
  RemoveMachineInput: {},
  RemoveWireGuardPeerInput: {},
  ResetAddOnPasswordInput: {},
  RestartAllocationInput: {},
  RestartAppInput: {},
  RestoreVolumeSnapshotInput: {},
  ResumeAppInput: {},
  RevokePostgresClusterUserAccessInput: {},
  RuntimeType: "enum" as const,
  SaveDeploymentSourceInput: {},
  ScaleAppInput: {
    regions: "ScaleRegionInput",
  },
  ScaleRegionInput: {},
  SecretInput: {},
  ServiceHandlerType: "enum" as const,
  ServiceInput: {
    protocol: "ServiceProtocolType",
    ports: "ServiceInputPort",
    checks: "CheckInput",
  },
  ServiceInputPort: {
    handlers: "ServiceHandlerType",
    tlsOptions: "ServicePortTlsOptionsInput",
  },
  ServicePortTlsOptionsInput: {},
  ServiceProtocolType: "enum" as const,
  SetAppsv2DefaultOnInput: {},
  SetPagerdutyHandlerInput: {
    pagerdutyStatusMap: "JSON",
  },
  SetPlatformVersionInput: {},
  SetSecretsInput: {
    secrets: "SecretInput",
  },
  SetSlackHandlerInput: {},
  SetVMCountInput: {
    groupCounts: "VMCountInput",
  },
  SetVMSizeInput: {},
  StartBuildInput: {},
  StartMachineInput: {},
  StopAllocationInput: {},
  StopMachineInput: {},
  TemplateDeployment: {
    apps: {},
  },
  ThirdPartyConfigurationLevel: "enum" as const,
  UnlockAppInput: {},
  UnsetSecretsInput: {},
  UpdateAddOnInput: {
    options: "JSON",
  },
  UpdateAutoscaleConfigInput: {
    regions: "AutoscaleRegionConfigInput",
  },
  UpdateDNSPortalInput: {},
  UpdateDNSRecordInput: {},
  UpdateDNSRecordsInput: {
    changes: "DNSRecordChangeInput",
  },
  UpdateOrganizationMembershipInput: {
    role: "OrganizationMemberRole",
    alertsEnabled: "OrganizationAlertsEnabled",
  },
  UpdateReleaseInput: {},
  UpdateRemoteBuilderInput: {},
  UpdateThirdPartyConfigurationInput: {
    caveats: "CaveatSet",
    flyctlLevel: "ThirdPartyConfigurationLevel",
    uiexLevel: "ThirdPartyConfigurationLevel",
    customLevel: "ThirdPartyConfigurationLevel",
  },
  User: {
    agreedToProviderTos: {},
    organizations: {},
  },
  VM: {
    attachedVolumes: {},
    checks: {},
    recentLogs: {},
  },
  VMCountInput: {},
  ValidateWireGuardPeersInput: {},
  Volume: {
    snapshots: {},
  },
};

export const ReturnTypes: Record<string, any> = {
  oneOf: {},
  AccessToken: {
    createdAt: "ISO8601DateTime",
    id: "ID",
    name: "String",
    type: "AccessTokenType",
  },
  AccessTokenConnection: {
    edges: "AccessTokenEdge",
    nodes: "AccessToken",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  AccessTokenEdge: {
    cursor: "String",
    node: "AccessToken",
  },
  AddCertificatePayload: {
    app: "App",
    certificate: "AppCertificate",
    check: "HostnameCheck",
    errors: "String",
  },
  AddOn: {
    addOnPlan: "AddOnPlan",
    addOnPlanName: "String",
    addOnProvider: "AddOnProvider",
    app: "App",
    apps: "AppConnection",
    environment: "JSON",
    errorMessage: "String",
    hostname: "String",
    id: "ID",
    metadata: "JSON",
    name: "String",
    options: "JSON",
    organization: "Organization",
    password: "String",
    primaryRegion: "String",
    privateIp: "String",
    publicUrl: "String",
    readRegions: "String",
    ssoLink: "String",
    stats: "JSON",
    status: "String",
  },
  AddOnConnection: {
    edges: "AddOnEdge",
    nodes: "AddOn",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  AddOnEdge: {
    cursor: "String",
    node: "AddOn",
  },
  AddOnPlan: {
    displayName: "String",
    id: "ID",
    maxCommandsPerSec: "Int",
    maxConcurrentConnections: "Int",
    maxDailyBandwidth: "String",
    maxDailyCommands: "Int",
    maxDataSize: "String",
    maxRequestSize: "String",
    name: "String",
    pricePerMonth: "Int",
  },
  AddOnPlanConnection: {
    edges: "AddOnPlanEdge",
    nodes: "AddOnPlan",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  AddOnPlanEdge: {
    cursor: "String",
    node: "AddOnPlan",
  },
  AddOnProvider: {
    asyncProvisioning: "Boolean",
    autoProvision: "Boolean",
    beta: "Boolean",
    detectPlatform: "Boolean",
    displayName: "String",
    excludedRegions: "Region",
    id: "ID",
    internal: "Boolean",
    name: "String",
    nameSuffix: "String",
    provisioningInstructions: "String",
    regions: "Region",
    resourceName: "String",
    selectName: "Boolean",
    selectRegion: "Boolean",
    selectReplicaRegions: "Boolean",
    tosAgreement: "String",
    tosUrl: "String",
  },
  AddWireGuardPeerPayload: {
    clientMutationId: "String",
    endpointip: "String",
    network: "String",
    peerip: "String",
    pubkey: "String",
  },
  AllocateIPAddressPayload: {
    app: "App",
    clientMutationId: "String",
    ipAddress: "IPAddress",
  },
  Allocation: {
    attachedVolumes: "VolumeConnection",
    canary: "Boolean",
    checks: "CheckState",
    createdAt: "ISO8601DateTime",
    criticalCheckCount: "Int",
    desiredStatus: "String",
    events: "AllocationEvent",
    failed: "Boolean",
    healthy: "Boolean",
    id: "ID",
    idShort: "ID",
    latestVersion: "Boolean",
    passingCheckCount: "Int",
    privateIP: "String",
    recentLogs: "LogEntry",
    region: "String",
    restarts: "Int",
    status: "String",
    taskName: "String",
    totalCheckCount: "Int",
    transitioning: "Boolean",
    updatedAt: "ISO8601DateTime",
    version: "Int",
    warningCheckCount: "Int",
  },
  AllocationEvent: {
    message: "String",
    timestamp: "ISO8601DateTime",
    type: "String",
  },
  App: {
    addOns: "AddOnConnection",
    allocation: "Allocation",
    allocations: "Allocation",
    appUrl: "String",
    autoscaling: "AutoscalingConfig",
    backupRegions: "Region",
    builds: "BuildConnection",
    certificate: "AppCertificate",
    certificates: "AppCertificateConnection",
    changes: "AppChangeConnection",
    config: "AppConfig",
    createdAt: "ISO8601DateTime",
    currentLock: "AppLock",
    currentPlacement: "RegionPlacement",
    currentRelease: "Release",
    currentReleaseUnprocessed: "ReleaseUnprocessed",
    deployed: "Boolean",
    deploymentSource: "DeploymentSource",
    deploymentStatus: "DeploymentStatus",
    hasDeploymentSource: "Boolean",
    healthChecks: "CheckStateConnection",
    hostname: "String",
    id: "ID",
    image: "Image",
    imageDetails: "ImageVersion",
    imageUpgradeAvailable: "Boolean",
    imageVersionTrackingEnabled: "Boolean",
    instrumentsKey: "String",
    internalId: "String",
    internalNumericId: "Int",
    ipAddress: "IPAddress",
    ipAddresses: "IPAddressConnection",
    key: "String",
    latestImageDetails: "ImageVersion",
    limitedAccessTokens: "LimitedAccessTokenConnection",
    machine: "Machine",
    machines: "MachineConnection",
    name: "String",
    network: "String",
    networkId: "Int",
    organization: "Organization",
    parseConfig: "AppConfig",
    platformVersion: "PlatformVersionEnum",
    processGroups: "ProcessGroup",
    regions: "Region",
    release: "Release",
    releases: "ReleaseConnection",
    releasesUnprocessed: "ReleaseUnprocessedConnection",
    role: "AppRole",
    runtime: "RuntimeType",
    secrets: "Secret",
    services: "Service",
    sharedIpAddress: "String",
    state: "AppState",
    status: "String",
    taskGroupCounts: "TaskGroupCount",
    usage: "AppUsage",
    version: "Int",
    vmSize: "VMSize",
    vms: "VMConnection",
    volume: "Volume",
    volumes: "VolumeConnection",
  },
  AppCertificate: {
    acmeAlpnConfigured: "Boolean",
    acmeDnsConfigured: "Boolean",
    certificateAuthority: "String",
    certificateRequestedAt: "ISO8601DateTime",
    check: "Boolean",
    clientStatus: "String",
    configured: "Boolean",
    createdAt: "ISO8601DateTime",
    dnsProvider: "String",
    dnsValidationHostname: "String",
    dnsValidationInstructions: "String",
    dnsValidationTarget: "String",
    domain: "String",
    hostname: "String",
    id: "ID",
    isAcmeAlpnConfigured: "Boolean",
    isAcmeDnsConfigured: "Boolean",
    isApex: "Boolean",
    isConfigured: "Boolean",
    isWildcard: "Boolean",
    issued: "CertificateConnection",
    source: "String",
    validationErrors: "AppCertificateValidationError",
  },
  AppCertificateConnection: {
    edges: "AppCertificateEdge",
    nodes: "AppCertificate",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  AppCertificateEdge: {
    cursor: "String",
    node: "AppCertificate",
  },
  AppCertificateValidationError: {
    message: "String",
    timestamp: "ISO8601DateTime",
  },
  AppChange: {
    actor: "AppChangeActor",
    actorType: "String",
    app: "App",
    createdAt: "ISO8601DateTime",
    description: "String",
    id: "ID",
    status: "String",
    updatedAt: "ISO8601DateTime",
    user: "User",
  },
  AppChangeActor: {
    "...on Build": "Build",
    "...on Release": "Release",
    "...on Secret": "Secret",
  },
  AppChangeConnection: {
    edges: "AppChangeEdge",
    nodes: "AppChange",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  AppChangeEdge: {
    cursor: "String",
    node: "AppChange",
  },
  AppConfig: {
    definition: "JSON",
    errors: "String",
    services: "Service",
    valid: "Boolean",
  },
  AppConnection: {
    edges: "AppEdge",
    nodes: "App",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  AppEdge: {
    cursor: "String",
    node: "App",
  },
  AppLock: {
    expiration: "ISO8601DateTime",
    lockId: "ID",
  },
  AppRole: {
    "...on EmptyAppRole": "EmptyAppRole",
    "...on FlyctlMachineHostAppRole": "FlyctlMachineHostAppRole",
    "...on PostgresClusterAppRole": "PostgresClusterAppRole",
    "...on RemoteDockerBuilderAppRole": "RemoteDockerBuilderAppRole",
    name: "String",
  },
  AppUsage: {
    interval: "String",
    requestsCount: "Int",
    totalAppExecS: "Int",
    totalDataOutGB: "Float",
    ts: "ISO8601DateTime",
  },
  AttachPostgresClusterPayload: {
    app: "App",
    clientMutationId: "String",
    connectionString: "String",
    environmentVariableName: "String",
    postgresClusterApp: "App",
  },
  AutoscaleRegionConfig: {
    code: "String",
    minCount: "Int",
    weight: "Int",
  },
  AutoscalingConfig: {
    backupRegions: "String",
    balanceRegions: "Boolean",
    enabled: "Boolean",
    maxCount: "Int",
    minCount: "Int",
    preferredRegion: "String",
    regions: "AutoscaleRegionConfig",
    strategy: "AutoscaleStrategy",
  },
  BigInt: `scalar.BigInt` as const,
  Build: {
    app: "App",
    commitId: "String",
    commitUrl: "String",
    createdAt: "ISO8601DateTime",
    createdBy: "User",
    failed: "Boolean",
    id: "ID",
    image: "String",
    inProgress: "Boolean",
    logs: "String",
    number: "Int",
    status: "String",
    succeeded: "Boolean",
    updatedAt: "ISO8601DateTime",
  },
  BuildConnection: {
    edges: "BuildEdge",
    nodes: "Build",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  BuildEdge: {
    cursor: "String",
    node: "Build",
  },
  CancelBuildPayload: {
    build: "Build",
  },
  CaveatSet: `scalar.CaveatSet` as const,
  Certificate: {
    expiresAt: "ISO8601DateTime",
    hostname: "String",
    id: "ID",
    type: "String",
  },
  CertificateConnection: {
    edges: "CertificateEdge",
    nodes: "Certificate",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  CertificateEdge: {
    cursor: "String",
    node: "Certificate",
  },
  Check: {
    httpHeaders: "CheckHeader",
    httpMethod: "String",
    httpPath: "String",
    httpProtocol: "HTTPProtocol",
    httpTlsSkipVerify: "Boolean",
    interval: "Int",
    name: "String",
    scriptArgs: "String",
    scriptCommand: "String",
    timeout: "Int",
    type: "CheckType",
  },
  CheckCertificatePayload: {
    app: "App",
    certificate: "AppCertificate",
    check: "HostnameCheck",
    clientMutationId: "String",
  },
  CheckDomainPayload: {
    clientMutationId: "String",
    dnsAvailable: "Boolean",
    domainName: "String",
    registrationAvailable: "Boolean",
    registrationPeriod: "Int",
    registrationPrice: "Int",
    registrationSupported: "Boolean",
    tld: "String",
    transferAvailable: "Boolean",
  },
  CheckHTTPResponse: {
    closeTs: "String",
    connectedTs: "String",
    dnsTs: "String",
    firstTs: "String",
    flyioDebug: "JSON",
    headers: "JSON",
    id: "ID",
    lastTs: "String",
    location: "CheckLocation",
    rawHeaders: "String",
    rawOutput: "String",
    resolvedIp: "String",
    sentTs: "String",
    startTs: "String",
    statusCode: "Int",
    tlsTs: "String",
  },
  CheckHTTPResponseConnection: {
    edges: "CheckHTTPResponseEdge",
    nodes: "CheckHTTPResponse",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  CheckHTTPResponseEdge: {
    cursor: "String",
    node: "CheckHTTPResponse",
  },
  CheckHeader: {
    name: "String",
    value: "String",
  },
  CheckJob: {
    httpOptions: "CheckJobHTTPOptions",
    id: "ID",
    locations: "CheckLocationConnection",
    nextRunAt: "ISO8601DateTime",
    runs: "CheckJobRunConnection",
    schedule: "String",
    url: "String",
  },
  CheckJobConnection: {
    edges: "CheckJobEdge",
    nodes: "CheckJob",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  CheckJobEdge: {
    cursor: "String",
    node: "CheckJob",
  },
  CheckJobHTTPOptions: {
    headers: "String",
    verb: "CheckHTTPVerb",
  },
  CheckJobRun: {
    completedAt: "ISO8601DateTime",
    createdAt: "ISO8601DateTime",
    httpOptions: "CheckJobHTTPOptions",
    httpResponses: "CheckHTTPResponseConnection",
    id: "ID",
    locations: "CheckLocationConnection",
    state: "String",
    tests: "String",
    url: "String",
  },
  CheckJobRunConnection: {
    edges: "CheckJobRunEdge",
    nodes: "CheckJobRun",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  CheckJobRunEdge: {
    cursor: "String",
    node: "CheckJobRun",
  },
  CheckLocation: {
    coordinates: "Float",
    country: "String",
    locality: "String",
    name: "String",
    state: "String",
    title: "String",
  },
  CheckLocationConnection: {
    edges: "CheckLocationEdge",
    nodes: "CheckLocation",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  CheckLocationEdge: {
    cursor: "String",
    node: "CheckLocation",
  },
  CheckState: {
    allocation: "Allocation",
    allocationId: "String",
    name: "String",
    output: "String",
    serviceName: "String",
    status: "String",
    type: "CheckType",
    updatedAt: "ISO8601DateTime",
  },
  CheckStateConnection: {
    edges: "CheckStateEdge",
    nodes: "CheckState",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  CheckStateEdge: {
    cursor: "String",
    node: "CheckState",
  },
  ConfigureRegionsPayload: {
    app: "App",
    backupRegions: "Region",
    clientMutationId: "String",
    group: "String",
    regions: "Region",
  },
  CreateAddOnPayload: {
    addOn: "AddOn",
    clientMutationId: "String",
  },
  CreateAndRegisterDomainPayload: {
    clientMutationId: "String",
    domain: "Domain",
    organization: "Organization",
  },
  CreateAndTransferDomainPayload: {
    clientMutationId: "String",
    domain: "Domain",
    organization: "Organization",
  },
  CreateAppPayload: {
    app: "App",
    clientMutationId: "String",
  },
  CreateBuildPayload: {
    clientMutationId: "String",
    id: "ID",
    status: "String",
  },
  CreateCheckJobPayload: {
    checkJob: "CheckJob",
    checkJobRun: "CheckJobRun",
    clientMutationId: "String",
  },
  CreateCheckJobRunPayload: {
    checkJob: "CheckJob",
    checkJobRun: "CheckJobRun",
    clientMutationId: "String",
  },
  CreateDNSPortalPayload: {
    clientMutationId: "String",
    dnsPortal: "DNSPortal",
  },
  CreateDNSPortalSessionPayload: {
    clientMutationId: "String",
    dnsPortalSession: "DNSPortalSession",
  },
  CreateDNSRecordPayload: {
    clientMutationId: "String",
    record: "DNSRecord",
  },
  CreateDelegatedWireGuardTokenPayload: {
    clientMutationId: "String",
    token: "String",
  },
  CreateDoctorReportPayload: {
    clientMutationId: "String",
    reportId: "ID",
  },
  CreateDoctorUrlPayload: {
    putUrl: "String",
  },
  CreateDomainPayload: {
    clientMutationId: "String",
    domain: "Domain",
    organization: "Organization",
  },
  CreateExtensionTosAgreementPayload: {
    clientMutationId: "String",
  },
  CreateLimitedAccessTokenPayload: {
    clientMutationId: "String",
    limitedAccessToken: "LimitedAccessToken",
  },
  CreateOrganizationInvitationPayload: {
    clientMutationId: "String",
    invitation: "OrganizationInvitation",
  },
  CreateOrganizationPayload: {
    clientMutationId: "String",
    organization: "Organization",
    token: "String",
  },
  CreatePostgresClusterDatabasePayload: {
    clientMutationId: "String",
    database: "PostgresClusterDatabase",
    postgresClusterRole: "PostgresClusterAppRole",
  },
  CreatePostgresClusterUserPayload: {
    clientMutationId: "String",
    postgresClusterRole: "PostgresClusterAppRole",
    user: "PostgresClusterUser",
  },
  CreateReleasePayload: {
    app: "App",
    clientMutationId: "String",
    release: "Release",
  },
  CreateTemplateDeploymentPayload: {
    clientMutationId: "String",
    templateDeployment: "TemplateDeployment",
  },
  CreateThirdPartyConfigurationPayload: {
    clientMutationId: "String",
    thirdPartyConfiguration: "ThirdPartyConfiguration",
  },
  CreateVolumePayload: {
    app: "App",
    clientMutationId: "String",
    volume: "Volume",
  },
  CreateVolumeSnapshotPayload: {
    clientMutationId: "String",
    volume: "Volume",
  },
  DNSPortal: {
    accentColor: "String",
    createdAt: "ISO8601DateTime",
    id: "ID",
    name: "String",
    organization: "Organization",
    primaryColor: "String",
    returnUrl: "String",
    returnUrlText: "String",
    supportUrl: "String",
    supportUrlText: "String",
    title: "String",
    updatedAt: "ISO8601DateTime",
  },
  DNSPortalConnection: {
    edges: "DNSPortalEdge",
    nodes: "DNSPortal",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  DNSPortalEdge: {
    cursor: "String",
    node: "DNSPortal",
  },
  DNSPortalSession: {
    createdAt: "ISO8601DateTime",
    dnsPortal: "DNSPortal",
    expiresAt: "ISO8601DateTime",
    id: "ID",
    isExpired: "Boolean",
    returnUrl: "String",
    returnUrlText: "String",
    title: "String",
    url: "String",
  },
  DNSRecord: {
    createdAt: "ISO8601DateTime",
    domain: "Domain",
    fqdn: "String",
    id: "ID",
    isApex: "Boolean",
    isSystem: "Boolean",
    isWildcard: "Boolean",
    name: "String",
    rdata: "String",
    ttl: "Int",
    type: "DNSRecordType",
    updatedAt: "ISO8601DateTime",
  },
  DNSRecordAttributes: {
    name: "String",
    rdata: "String",
    ttl: "Int",
    type: "DNSRecordType",
  },
  DNSRecordConnection: {
    edges: "DNSRecordEdge",
    nodes: "DNSRecord",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  DNSRecordDiff: {
    action: "DNSRecordChangeAction",
    newAttributes: "DNSRecordAttributes",
    newText: "String",
    oldAttributes: "DNSRecordAttributes",
    oldText: "String",
  },
  DNSRecordEdge: {
    cursor: "String",
    node: "DNSRecord",
  },
  DNSRecordWarning: {
    action: "DNSRecordChangeAction",
    attributes: "DNSRecordAttributes",
    message: "String",
    record: "DNSRecord",
  },
  DelegatedWireGuardToken: {
    id: "ID",
    name: "String",
  },
  DelegatedWireGuardTokenConnection: {
    edges: "DelegatedWireGuardTokenEdge",
    nodes: "DelegatedWireGuardToken",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  DelegatedWireGuardTokenEdge: {
    cursor: "String",
    node: "DelegatedWireGuardToken",
  },
  DeleteAddOnPayload: {
    clientMutationId: "String",
    deletedAddOnName: "String",
  },
  DeleteAppPayload: {
    organization: "Organization",
  },
  DeleteCertificatePayload: {
    app: "App",
    certificate: "AppCertificate",
    errors: "String",
  },
  DeleteDNSPortalPayload: {
    clientMutationId: "String",
    organization: "Organization",
  },
  DeleteDNSPortalSessionPayload: {
    clientMutationId: "String",
    dnsPortal: "DNSPortal",
  },
  DeleteDNSRecordPayload: {
    clientMutationId: "String",
    domain: "Domain",
  },
  DeleteDelegatedWireGuardTokenPayload: {
    clientMutationId: "String",
    token: "String",
  },
  DeleteDeploymentSourcePayload: {
    app: "App",
    clientMutationId: "String",
  },
  DeleteDomainPayload: {
    clientMutationId: "String",
    organization: "Organization",
  },
  DeleteHealthCheckHandlerPayload: {
    clientMutationId: "String",
  },
  DeleteLimitedAccessTokenPayload: {
    clientMutationId: "String",
    token: "String",
  },
  DeleteOrganizationInvitationPayload: {
    clientMutationId: "String",
    organization: "Organization",
  },
  DeleteOrganizationMembershipPayload: {
    clientMutationId: "String",
    organization: "Organization",
    user: "User",
  },
  DeleteOrganizationPayload: {
    clientMutationId: "String",
    deletedOrganizationId: "ID",
  },
  DeleteRemoteBuilderPayload: {
    clientMutationId: "String",
    organization: "Organization",
  },
  DeleteThirdPartyConfigurationPayload: {
    clientMutationId: "String",
    ok: "Boolean",
  },
  DeleteVolumePayload: {
    app: "App",
    clientMutationId: "String",
  },
  DeployImagePayload: {
    app: "App",
    clientMutationId: "String",
    release: "Release",
    releaseCommand: "ReleaseCommand",
  },
  DeploymentSource: {
    backend: "JSON",
    baseDir: "String",
    connected: "Boolean",
    id: "ID",
    provider: "String",
    ref: "String",
    repositoryId: "String",
    repositoryUrl: "String",
  },
  DeploymentStatus: {
    allocations: "Allocation",
    description: "String",
    desiredCount: "Int",
    healthyCount: "Int",
    id: "ID",
    inProgress: "Boolean",
    placedCount: "Int",
    promoted: "Boolean",
    status: "String",
    successful: "Boolean",
    unhealthyCount: "Int",
    version: "Int",
  },
  DetachPostgresClusterPayload: {
    app: "App",
    clientMutationId: "String",
    postgresClusterApp: "App",
  },
  DischargeRootTokenPayload: {
    authToken: "String",
    clientMutationId: "String",
  },
  Domain: {
    autoRenew: "Boolean",
    createdAt: "ISO8601DateTime",
    delegatedNameservers: "String",
    dnsRecords: "DNSRecordConnection",
    dnsStatus: "DomainDNSStatus",
    expiresAt: "ISO8601DateTime",
    id: "ID",
    name: "String",
    organization: "Organization",
    registrationStatus: "DomainRegistrationStatus",
    updatedAt: "ISO8601DateTime",
    zoneNameservers: "String",
  },
  DomainConnection: {
    edges: "DomainEdge",
    nodes: "Domain",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  DomainEdge: {
    cursor: "String",
    node: "Domain",
  },
  DummyWireGuardPeerPayload: {
    clientMutationId: "String",
    endpointip: "String",
    localpub: "String",
    peerip: "String",
    privkey: "String",
    pubkey: "String",
  },
  EmptyAppRole: {
    name: "String",
  },
  EnablePostgresConsulPayload: {
    clientMutationId: "String",
    consulUrl: "String",
  },
  EnsureMachineRemoteBuilderPayload: {
    app: "App",
    clientMutationId: "String",
    machine: "Machine",
  },
  EstablishSSHKeyPayload: {
    certificate: "String",
    clientMutationId: "String",
  },
  ExportDNSZonePayload: {
    clientMutationId: "String",
    contents: "String",
    domain: "Domain",
  },
  ExtendVolumePayload: {
    app: "App",
    clientMutationId: "String",
    needsRestart: "Boolean",
    volume: "Volume",
  },
  FinishBuildPayload: {
    clientMutationId: "String",
    id: "ID",
    status: "String",
    wallclockTimeMs: "Int",
  },
  FlyPlatform: {
    flyctl: "FlyctlRelease",
    regions: "Region",
    requestRegion: "String",
    vmSizes: "VMSize",
  },
  FlyctlMachineHostAppRole: {
    name: "String",
  },
  FlyctlRelease: {
    timestamp: "ISO8601DateTime",
    version: "String",
  },
  ForkVolumePayload: {
    app: "App",
    clientMutationId: "String",
    volume: "Volume",
  },
  GithubAppInstallation: {
    editUrl: "String",
    id: "ID",
    owner: "String",
    repositories: "GithubRepository",
  },
  GithubIntegration: {
    installationUrl: "String",
    installations: "GithubAppInstallation",
    viewerAuthenticated: "Boolean",
  },
  GithubRepository: {
    fork: "Boolean",
    fullName: "String",
    id: "String",
    name: "String",
    private: "Boolean",
  },
  GrantPostgresClusterUserAccessPayload: {
    clientMutationId: "String",
    database: "PostgresClusterDatabase",
    postgresClusterRole: "PostgresClusterAppRole",
    user: "PostgresClusterUser",
  },
  HealthCheck: {
    entity: "String",
    lastPassing: "ISO8601DateTime",
    name: "String",
    output: "String",
    state: "String",
  },
  HealthCheckConnection: {
    edges: "HealthCheckEdge",
    nodes: "HealthCheck",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  HealthCheckEdge: {
    cursor: "String",
    node: "HealthCheck",
  },
  HealthCheckHandler: {
    name: "String",
    type: "String",
  },
  HealthCheckHandlerConnection: {
    edges: "HealthCheckHandlerEdge",
    nodes: "HealthCheckHandler",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  HealthCheckHandlerEdge: {
    cursor: "String",
    node: "HealthCheckHandler",
  },
  HerokuApp: {
    id: "String",
    name: "String",
    region: "String",
    releasedAt: "ISO8601DateTime",
    stack: "String",
    teamName: "String",
  },
  HerokuIntegration: {
    herokuApps: "HerokuApp",
    viewerAuthenticated: "Boolean",
  },
  Host: {
    id: "ID",
  },
  HostnameCheck: {
    aRecords: "String",
    aaaaRecords: "String",
    acmeDnsConfigured: "Boolean",
    caaRecords: "String",
    cnameRecords: "String",
    dnsConfigured: "Boolean",
    dnsProvider: "String",
    dnsVerificationRecord: "String",
    errors: "String",
    id: "ID",
    isProxied: "Boolean",
    resolvedAddresses: "String",
    soa: "String",
  },
  IPAddress: {
    address: "String",
    createdAt: "ISO8601DateTime",
    id: "ID",
    region: "String",
    type: "IPAddressType",
  },
  IPAddressConnection: {
    edges: "IPAddressEdge",
    nodes: "IPAddress",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  IPAddressEdge: {
    cursor: "String",
    node: "IPAddress",
  },
  ISO8601DateTime: `scalar.ISO8601DateTime` as const,
  Image: {
    absoluteRef: "String",
    compressedSize: "Int",
    compressedSizeFull: "BigInt",
    config: "JSON",
    configDigest: "JSON",
    createdAt: "ISO8601DateTime",
    digest: "String",
    id: "ID",
    label: "String",
    manifest: "JSON",
    ref: "String",
    registry: "String",
    repository: "String",
    tag: "String",
  },
  ImageVersion: {
    digest: "String",
    registry: "String",
    repository: "String",
    tag: "String",
    version: "String",
  },
  ImportCertificatePayload: {
    app: "App",
    appCertificate: "AppCertificate",
    certificate: "Certificate",
    errors: "String",
  },
  ImportDNSZonePayload: {
    changes: "DNSRecordDiff",
    clientMutationId: "String",
    domain: "Domain",
    warnings: "DNSRecordWarning",
  },
  IssueCertificatePayload: {
    certificate: "String",
    clientMutationId: "String",
    key: "String",
  },
  JSON: `scalar.JSON` as const,
  KillMachinePayload: {
    clientMutationId: "String",
    machine: "Machine",
  },
  LaunchMachinePayload: {
    app: "App",
    clientMutationId: "String",
    machine: "Machine",
  },
  LimitedAccessToken: {
    createdAt: "ISO8601DateTime",
    expiresAt: "ISO8601DateTime",
    id: "ID",
    name: "String",
    profile: "String",
    token: "String",
    tokenHeader: "String",
  },
  LimitedAccessTokenConnection: {
    edges: "LimitedAccessTokenEdge",
    nodes: "LimitedAccessToken",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  LimitedAccessTokenEdge: {
    cursor: "String",
    node: "LimitedAccessToken",
  },
  LockAppPayload: {
    clientMutationId: "String",
    expiration: "ISO8601DateTime",
    lockId: "ID",
  },
  LogEntry: {
    id: "String",
    instanceId: "String",
    level: "String",
    message: "String",
    region: "String",
    timestamp: "ISO8601DateTime",
  },
  LogOutPayload: {
    clientMutationId: "String",
    ok: "Boolean",
  },
  LoggedCertificate: {
    cert: "String",
    id: "ID",
    root: "Boolean",
  },
  LoggedCertificateConnection: {
    edges: "LoggedCertificateEdge",
    nodes: "LoggedCertificate",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  LoggedCertificateEdge: {
    cursor: "String",
    node: "LoggedCertificate",
  },
  Macaroon: {
    avatarUrl: "String",
    createdAt: "ISO8601DateTime",
    email: "String",
    featureFlags: "String",
    hasNodeproxyApps: "Boolean",
    id: "ID",
    lastRegion: "String",
    name: "String",
    organizations: "OrganizationConnection",
    personalOrganization: "Organization",
    trust: "OrganizationTrust",
    twoFactorProtection: "Boolean",
    username: "String",
  },
  Machine: {
    app: "App",
    config: "JSON",
    createdAt: "ISO8601DateTime",
    events: "MachineEventConnection",
    host: "Host",
    id: "ID",
    instanceId: "String",
    ips: "MachineIPConnection",
    name: "String",
    region: "String",
    state: "String",
    updatedAt: "ISO8601DateTime",
  },
  MachineConnection: {
    edges: "MachineEdge",
    nodes: "Machine",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  MachineEdge: {
    cursor: "String",
    node: "Machine",
  },
  MachineEvent: {
    "...on MachineEventDestroy": "MachineEventDestroy",
    "...on MachineEventExit": "MachineEventExit",
    "...on MachineEventGeneric": "MachineEventGeneric",
    "...on MachineEventStart": "MachineEventStart",
    id: "ID",
    kind: "String",
    timestamp: "ISO8601DateTime",
  },
  MachineEventConnection: {
    edges: "MachineEventEdge",
    nodes: "MachineEvent",
    pageInfo: "PageInfo",
  },
  MachineEventDestroy: {
    id: "ID",
    kind: "String",
    timestamp: "ISO8601DateTime",
  },
  MachineEventEdge: {
    cursor: "String",
    node: "MachineEvent",
  },
  MachineEventExit: {
    exitCode: "Int",
    id: "ID",
    kind: "String",
    metadata: "JSON",
    oomKilled: "Boolean",
    requestedStop: "Boolean",
    timestamp: "ISO8601DateTime",
  },
  MachineEventGeneric: {
    id: "ID",
    kind: "String",
    timestamp: "ISO8601DateTime",
  },
  MachineEventStart: {
    id: "ID",
    kind: "String",
    timestamp: "ISO8601DateTime",
  },
  MachineIP: {
    family: "String",
    id: "ID",
    ip: "String",
    kind: "String",
    maskSize: "Int",
  },
  MachineIPConnection: {
    edges: "MachineIPEdge",
    nodes: "MachineIP",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  MachineIPEdge: {
    cursor: "String",
    node: "MachineIP",
  },
  MoveAppPayload: {
    app: "App",
    clientMutationId: "String",
  },
  Mutations: {
    addCertificate: "AddCertificatePayload",
    addWireGuardPeer: "AddWireGuardPeerPayload",
    allocateIpAddress: "AllocateIPAddressPayload",
    attachPostgresCluster: "AttachPostgresClusterPayload",
    cancelBuild: "CancelBuildPayload",
    checkCertificate: "CheckCertificatePayload",
    checkDomain: "CheckDomainPayload",
    configureRegions: "ConfigureRegionsPayload",
    createAddOn: "CreateAddOnPayload",
    createAndRegisterDomain: "CreateAndRegisterDomainPayload",
    createAndTransferDomain: "CreateAndTransferDomainPayload",
    createApp: "CreateAppPayload",
    createBuild: "CreateBuildPayload",
    createCheckJob: "CreateCheckJobPayload",
    createCheckJobRun: "CreateCheckJobRunPayload",
    createDelegatedWireGuardToken: "CreateDelegatedWireGuardTokenPayload",
    createDnsPortal: "CreateDNSPortalPayload",
    createDnsPortalSession: "CreateDNSPortalSessionPayload",
    createDnsRecord: "CreateDNSRecordPayload",
    createDoctorReport: "CreateDoctorReportPayload",
    createDoctorUrl: "CreateDoctorUrlPayload",
    createDomain: "CreateDomainPayload",
    createExtensionTosAgreement: "CreateExtensionTosAgreementPayload",
    createLimitedAccessToken: "CreateLimitedAccessTokenPayload",
    createOrganization: "CreateOrganizationPayload",
    createOrganizationInvitation: "CreateOrganizationInvitationPayload",
    createPostgresClusterDatabase: "CreatePostgresClusterDatabasePayload",
    createPostgresClusterUser: "CreatePostgresClusterUserPayload",
    createRelease: "CreateReleasePayload",
    createTemplateDeployment: "CreateTemplateDeploymentPayload",
    createThirdPartyConfiguration: "CreateThirdPartyConfigurationPayload",
    createVolume: "CreateVolumePayload",
    createVolumeSnapshot: "CreateVolumeSnapshotPayload",
    deleteAddOn: "DeleteAddOnPayload",
    deleteApp: "DeleteAppPayload",
    deleteCertificate: "DeleteCertificatePayload",
    deleteDelegatedWireGuardToken: "DeleteDelegatedWireGuardTokenPayload",
    deleteDeploymentSource: "DeleteDeploymentSourcePayload",
    deleteDnsPortal: "DeleteDNSPortalPayload",
    deleteDnsPortalSession: "DeleteDNSPortalSessionPayload",
    deleteDnsRecord: "DeleteDNSRecordPayload",
    deleteDomain: "DeleteDomainPayload",
    deleteHealthCheckHandler: "DeleteHealthCheckHandlerPayload",
    deleteLimitedAccessToken: "DeleteLimitedAccessTokenPayload",
    deleteOrganization: "DeleteOrganizationPayload",
    deleteOrganizationInvitation: "DeleteOrganizationInvitationPayload",
    deleteOrganizationMembership: "DeleteOrganizationMembershipPayload",
    deleteRemoteBuilder: "DeleteRemoteBuilderPayload",
    deleteThirdPartyConfiguration: "DeleteThirdPartyConfigurationPayload",
    deleteVolume: "DeleteVolumePayload",
    deployImage: "DeployImagePayload",
    detachPostgresCluster: "DetachPostgresClusterPayload",
    dischargeRootToken: "DischargeRootTokenPayload",
    dummyWireGuardPeer: "DummyWireGuardPeerPayload",
    enablePostgresConsul: "EnablePostgresConsulPayload",
    ensureMachineRemoteBuilder: "EnsureMachineRemoteBuilderPayload",
    establishSshKey: "EstablishSSHKeyPayload",
    exportDnsZone: "ExportDNSZonePayload",
    extendVolume: "ExtendVolumePayload",
    finishBuild: "FinishBuildPayload",
    forkVolume: "ForkVolumePayload",
    grantPostgresClusterUserAccess: "GrantPostgresClusterUserAccessPayload",
    importCertificate: "ImportCertificatePayload",
    importDnsZone: "ImportDNSZonePayload",
    issueCertificate: "IssueCertificatePayload",
    killMachine: "KillMachinePayload",
    launchMachine: "LaunchMachinePayload",
    lockApp: "LockAppPayload",
    logOut: "LogOutPayload",
    moveApp: "MoveAppPayload",
    nomadToMachinesMigration: "NomadToMachinesMigrationPayload",
    nomadToMachinesMigrationPrep: "NomadToMachinesMigrationPrepPayload",
    pauseApp: "PauseAppPayload",
    registerDomain: "RegisterDomainPayload",
    releaseIpAddress: "ReleaseIPAddressPayload",
    removeMachine: "RemoveMachinePayload",
    removeWireGuardPeer: "RemoveWireGuardPeerPayload",
    resetAddOnPassword: "ResetAddOnPasswordPayload",
    restartAllocation: "RestartAllocationPayload",
    restartApp: "RestartAppPayload",
    restoreVolumeSnapshot: "RestoreVolumeSnapshotPayload",
    resumeApp: "ResumeAppPayload",
    revokePostgresClusterUserAccess: "RevokePostgresClusterUserAccessPayload",
    saveDeploymentSource: "SaveDeploymentSourcePayload",
    scaleApp: "ScaleAppPayload",
    setAppsV2DefaultOn: "SetAppsv2DefaultOnPayload",
    setPagerdutyHandler: "SetPagerdutyHandlerPayload",
    setPlatformVersion: "SetPlatformVersionPayload",
    setSecrets: "SetSecretsPayload",
    setSlackHandler: "SetSlackHandlerPayload",
    setVmCount: "SetVMCountPayload",
    setVmSize: "SetVMSizePayload",
    startBuild: "StartBuildPayload",
    startMachine: "StartMachinePayload",
    stopAllocation: "StopAllocationPayload",
    stopMachine: "StopMachinePayload",
    unlockApp: "UnlockAppPayload",
    unsetSecrets: "UnsetSecretsPayload",
    updateAddOn: "UpdateAddOnPayload",
    updateAutoscaleConfig: "UpdateAutoscaleConfigPayload",
    updateDnsPortal: "UpdateDNSPortalPayload",
    updateDnsRecord: "UpdateDNSRecordPayload",
    updateDnsRecords: "UpdateDNSRecordsPayload",
    updateOrganizationMembership: "UpdateOrganizationMembershipPayload",
    updateRelease: "UpdateReleasePayload",
    updateRemoteBuilder: "UpdateRemoteBuilderPayload",
    updateThirdPartyConfiguration: "UpdateThirdPartyConfigurationPayload",
    validateWireGuardPeers: "ValidateWireGuardPeersPayload",
  },
  Node: {
    "...on AccessToken": "AccessToken",
    "...on AddOn": "AddOn",
    "...on AddOnPlan": "AddOnPlan",
    "...on Allocation": "Allocation",
    "...on App": "App",
    "...on AppCertificate": "AppCertificate",
    "...on AppChange": "AppChange",
    "...on Build": "Build",
    "...on Certificate": "Certificate",
    "...on CheckHTTPResponse": "CheckHTTPResponse",
    "...on CheckJob": "CheckJob",
    "...on CheckJobRun": "CheckJobRun",
    "...on DNSPortal": "DNSPortal",
    "...on DNSPortalSession": "DNSPortalSession",
    "...on DNSRecord": "DNSRecord",
    "...on DelegatedWireGuardToken": "DelegatedWireGuardToken",
    "...on Domain": "Domain",
    "...on Host": "Host",
    "...on IPAddress": "IPAddress",
    "...on LimitedAccessToken": "LimitedAccessToken",
    "...on LoggedCertificate": "LoggedCertificate",
    "...on Machine": "Machine",
    "...on MachineIP": "MachineIP",
    "...on Organization": "Organization",
    "...on OrganizationInvitation": "OrganizationInvitation",
    "...on PostgresClusterAttachment": "PostgresClusterAttachment",
    "...on Release": "Release",
    "...on ReleaseCommand": "ReleaseCommand",
    "...on ReleaseUnprocessed": "ReleaseUnprocessed",
    "...on Secret": "Secret",
    "...on TemplateDeployment": "TemplateDeployment",
    "...on ThirdPartyConfiguration": "ThirdPartyConfiguration",
    "...on User": "User",
    "...on UserCoupon": "UserCoupon",
    "...on VM": "VM",
    "...on Volume": "Volume",
    "...on VolumeSnapshot": "VolumeSnapshot",
    "...on WireGuardPeer": "WireGuardPeer",
    id: "ID",
  },
  NomadToMachinesMigrationPayload: {
    app: "App",
    clientMutationId: "String",
  },
  NomadToMachinesMigrationPrepPayload: {
    app: "App",
    clientMutationId: "String",
  },
  Organization: {
    activeDiscountName: "String",
    addOnSsoLink: "String",
    addOns: "AddOnConnection",
    agreedToProviderTos: "Boolean",
    apps: "AppConnection",
    billable: "Boolean",
    billingStatus: "BillingStatus",
    creditBalance: "Int",
    creditBalanceFormatted: "String",
    delegatedWireGuardTokens: "DelegatedWireGuardTokenConnection",
    dnsPortal: "DNSPortal",
    dnsPortals: "DNSPortalConnection",
    domain: "Domain",
    domains: "DomainConnection",
    extensionSsoLink: "String",
    healthCheckHandlers: "HealthCheckHandlerConnection",
    healthChecks: "HealthCheckConnection",
    id: "ID",
    internalNumericId: "BigInt",
    invitations: "OrganizationInvitationConnection",
    isCreditCardSaved: "Boolean",
    limitedAccessTokens: "LimitedAccessTokenConnection",
    loggedCertificates: "LoggedCertificateConnection",
    members: "OrganizationMembershipsConnection",
    name: "String",
    paidPlan: "Boolean",
    provisionsBetaExtensions: "Boolean",
    rawSlug: "String",
    remoteBuilderApp: "App",
    remoteBuilderImage: "String",
    settings: "JSON",
    slug: "String",
    sshCertificate: "String",
    thirdPartyConfigurations: "ThirdPartyConfigurationConnection",
    trust: "OrganizationTrust",
    type: "OrganizationType",
    viewerRole: "String",
    wireGuardPeer: "WireGuardPeer",
    wireGuardPeers: "WireGuardPeerConnection",
  },
  OrganizationConnection: {
    edges: "OrganizationEdge",
    nodes: "Organization",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  OrganizationEdge: {
    cursor: "String",
    node: "Organization",
  },
  OrganizationInvitation: {
    createdAt: "ISO8601DateTime",
    email: "String",
    id: "ID",
    inviter: "User",
    organization: "Organization",
    redeemed: "Boolean",
    redeemedAt: "ISO8601DateTime",
  },
  OrganizationInvitationConnection: {
    edges: "OrganizationInvitationEdge",
    nodes: "OrganizationInvitation",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  OrganizationInvitationEdge: {
    cursor: "String",
    node: "OrganizationInvitation",
  },
  OrganizationMembershipsConnection: {
    edges: "OrganizationMembershipsEdge",
    nodes: "User",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  OrganizationMembershipsEdge: {
    alertsEnabled: "OrganizationAlertsEnabled",
    cursor: "String",
    joinedAt: "ISO8601DateTime",
    node: "User",
    role: "OrganizationMemberRole",
  },
  PageInfo: {
    endCursor: "String",
    hasNextPage: "Boolean",
    hasPreviousPage: "Boolean",
    startCursor: "String",
  },
  PauseAppPayload: {
    app: "App",
    clientMutationId: "String",
  },
  PostgresClusterAppRole: {
    databases: "PostgresClusterDatabase",
    name: "String",
    users: "PostgresClusterUser",
  },
  PostgresClusterAttachment: {
    databaseName: "String",
    databaseUser: "String",
    environmentVariableName: "String",
    id: "ID",
  },
  PostgresClusterAttachmentConnection: {
    edges: "PostgresClusterAttachmentEdge",
    nodes: "PostgresClusterAttachment",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  PostgresClusterAttachmentEdge: {
    cursor: "String",
    node: "PostgresClusterAttachment",
  },
  PostgresClusterDatabase: {
    name: "String",
    users: "String",
  },
  PostgresClusterUser: {
    databases: "String",
    isSuperuser: "Boolean",
    username: "String",
  },
  PriceTier: {
    unitAmount: "String",
    upTo: "BigInt",
  },
  Principal: {
    "...on Macaroon": "Macaroon",
    "...on User": "User",
    avatarUrl: "String",
    createdAt: "ISO8601DateTime",
    email: "String",
    featureFlags: "String",
    hasNodeproxyApps: "Boolean",
    id: "ID",
    lastRegion: "String",
    name: "String",
    organizations: "OrganizationConnection",
    personalOrganization: "Organization",
    trust: "OrganizationTrust",
    twoFactorProtection: "Boolean",
    username: "String",
  },
  ProcessGroup: {
    maxPerRegion: "Int",
    name: "String",
    regions: "String",
    vmSize: "VMSize",
  },
  Product: {
    name: "String",
    tiers: "PriceTier",
    type: "String",
    unitLabel: "String",
  },
  Queries: {
    accessTokens: "AccessTokenConnection",
    addOn: "AddOn",
    addOnPlans: "AddOnPlanConnection",
    addOnProvider: "AddOnProvider",
    addOns: "AddOnConnection",
    app: "App",
    apps: "AppConnection",
    canPerformBluegreenDeployment: "Boolean",
    certificate: "AppCertificate",
    checkJobs: "CheckJobConnection",
    checkLocations: "CheckLocation",
    currentUser: "User",
    domain: "Domain",
    githubIntegration: "GithubIntegration",
    herokuIntegration: "HerokuIntegration",
    ipAddress: "IPAddress",
    latestImageDetails: "ImageVersion",
    latestImageTag: "String",
    machine: "Machine",
    machines: "MachineConnection",
    nearestRegion: "Region",
    node: "Node",
    nodes: "Node",
    organization: "Organization",
    organizations: "OrganizationConnection",
    personalOrganization: "Organization",
    platform: "FlyPlatform",
    postgresAttachments: "PostgresClusterAttachmentConnection",
    products: "Product",
    userOnlyToken: "Boolean",
    validateConfig: "AppConfig",
    viewer: "Principal",
    volume: "Volume",
  },
  Region: {
    code: "String",
    gatewayAvailable: "Boolean",
    latitude: "Float",
    longitude: "Float",
    name: "String",
    processGroup: "String",
    requiresPaidPlan: "Boolean",
  },
  RegionPlacement: {
    count: "Int",
    region: "String",
  },
  RegisterDomainPayload: {
    clientMutationId: "String",
    domain: "Domain",
  },
  Release: {
    config: "AppConfig",
    createdAt: "ISO8601DateTime",
    deploymentStrategy: "DeploymentStrategy",
    description: "String",
    evaluationId: "String",
    id: "ID",
    image: "Image",
    imageRef: "String",
    inProgress: "Boolean",
    reason: "String",
    revertedTo: "Int",
    stable: "Boolean",
    status: "String",
    updatedAt: "ISO8601DateTime",
    user: "User",
    version: "Int",
  },
  ReleaseCommand: {
    app: "App",
    command: "String",
    evaluationId: "String",
    exitCode: "Int",
    failed: "Boolean",
    id: "ID",
    inProgress: "Boolean",
    instanceId: "String",
    status: "String",
    succeeded: "Boolean",
  },
  ReleaseConnection: {
    edges: "ReleaseEdge",
    nodes: "Release",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  ReleaseEdge: {
    cursor: "String",
    node: "Release",
  },
  ReleaseIPAddressPayload: {
    app: "App",
    clientMutationId: "String",
  },
  ReleaseUnprocessed: {
    configDefinition: "JSON",
    createdAt: "ISO8601DateTime",
    deploymentStrategy: "DeploymentStrategy",
    description: "String",
    evaluationId: "String",
    id: "ID",
    image: "Image",
    imageRef: "String",
    inProgress: "Boolean",
    reason: "String",
    revertedTo: "Int",
    stable: "Boolean",
    status: "String",
    updatedAt: "ISO8601DateTime",
    user: "User",
    version: "Int",
  },
  ReleaseUnprocessedConnection: {
    edges: "ReleaseUnprocessedEdge",
    nodes: "ReleaseUnprocessed",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  ReleaseUnprocessedEdge: {
    cursor: "String",
    node: "ReleaseUnprocessed",
  },
  RemoteDockerBuilderAppRole: {
    name: "String",
  },
  RemoveMachinePayload: {
    clientMutationId: "String",
    machine: "Machine",
  },
  RemoveWireGuardPeerPayload: {
    clientMutationId: "String",
    organization: "Organization",
  },
  ResetAddOnPasswordPayload: {
    addOn: "AddOn",
    clientMutationId: "String",
  },
  RestartAllocationPayload: {
    allocation: "Allocation",
    app: "App",
    clientMutationId: "String",
  },
  RestartAppPayload: {
    app: "App",
    clientMutationId: "String",
  },
  RestoreVolumeSnapshotPayload: {
    clientMutationId: "String",
    snapshot: "VolumeSnapshot",
    volume: "Volume",
  },
  ResumeAppPayload: {
    app: "App",
    clientMutationId: "String",
  },
  RevokePostgresClusterUserAccessPayload: {
    clientMutationId: "String",
    database: "PostgresClusterDatabase",
    postgresClusterRole: "PostgresClusterAppRole",
    user: "PostgresClusterUser",
  },
  SaveDeploymentSourcePayload: {
    app: "App",
    build: "Build",
    clientMutationId: "String",
  },
  ScaleAppPayload: {
    app: "App",
    clientMutationId: "String",
    delta: "ScaleRegionChange",
    placement: "RegionPlacement",
  },
  ScaleRegionChange: {
    fromCount: "Int",
    region: "String",
    toCount: "Int",
  },
  Secret: {
    createdAt: "ISO8601DateTime",
    digest: "String",
    id: "ID",
    name: "String",
    user: "User",
  },
  Service: {
    checks: "Check",
    description: "String",
    hardConcurrency: "Int",
    internalPort: "Int",
    ports: "ServicePort",
    protocol: "ServiceProtocolType",
    softConcurrency: "Int",
  },
  ServicePort: {
    endPort: "Int",
    handlers: "ServiceHandlerType",
    port: "Int",
    startPort: "Int",
  },
  SetAppsv2DefaultOnPayload: {
    clientMutationId: "String",
    organization: "Organization",
  },
  SetPagerdutyHandlerPayload: {
    clientMutationId: "String",
    handler: "HealthCheckHandler",
  },
  SetPlatformVersionPayload: {
    app: "App",
    clientMutationId: "String",
  },
  SetSecretsPayload: {
    app: "App",
    clientMutationId: "String",
    release: "Release",
  },
  SetSlackHandlerPayload: {
    clientMutationId: "String",
    handler: "HealthCheckHandler",
  },
  SetVMCountPayload: {
    app: "App",
    clientMutationId: "String",
    release: "Release",
    taskGroupCounts: "TaskGroupCount",
    warnings: "String",
  },
  SetVMSizePayload: {
    app: "App",
    clientMutationId: "String",
    processGroup: "ProcessGroup",
    vmSize: "VMSize",
  },
  StartBuildPayload: {
    build: "Build",
    clientMutationId: "String",
  },
  StartMachinePayload: {
    clientMutationId: "String",
    machine: "Machine",
  },
  StopAllocationPayload: {
    allocation: "Allocation",
    app: "App",
    clientMutationId: "String",
  },
  StopMachinePayload: {
    clientMutationId: "String",
    machine: "Machine",
  },
  TaskGroupCount: {
    count: "Int",
    name: "String",
  },
  TemplateDeployment: {
    apps: "AppConnection",
    id: "ID",
    organization: "Organization",
    status: "String",
  },
  ThirdPartyConfiguration: {
    caveats: "CaveatSet",
    createdAt: "ISO8601DateTime",
    customLevel: "ThirdPartyConfigurationLevel",
    flyctlLevel: "ThirdPartyConfigurationLevel",
    id: "ID",
    location: "String",
    name: "String",
    organization: "Organization",
    uiexLevel: "ThirdPartyConfigurationLevel",
    updatedAt: "ISO8601DateTime",
  },
  ThirdPartyConfigurationConnection: {
    edges: "ThirdPartyConfigurationEdge",
    nodes: "ThirdPartyConfiguration",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  ThirdPartyConfigurationEdge: {
    cursor: "String",
    node: "ThirdPartyConfiguration",
  },
  UnlockAppPayload: {
    app: "App",
    clientMutationId: "String",
  },
  UnsetSecretsPayload: {
    app: "App",
    clientMutationId: "String",
    release: "Release",
  },
  UpdateAddOnPayload: {
    addOn: "AddOn",
    clientMutationId: "String",
  },
  UpdateAutoscaleConfigPayload: {
    app: "App",
    clientMutationId: "String",
  },
  UpdateDNSPortalPayload: {
    clientMutationId: "String",
    dnsPortal: "DNSPortal",
  },
  UpdateDNSRecordPayload: {
    clientMutationId: "String",
    record: "DNSRecord",
  },
  UpdateDNSRecordsPayload: {
    changes: "DNSRecordDiff",
    clientMutationId: "String",
    domain: "Domain",
    warnings: "DNSRecordWarning",
  },
  UpdateOrganizationMembershipPayload: {
    clientMutationId: "String",
    organization: "Organization",
    user: "User",
  },
  UpdateReleasePayload: {
    clientMutationId: "String",
    release: "Release",
  },
  UpdateRemoteBuilderPayload: {
    clientMutationId: "String",
    organization: "Organization",
  },
  UpdateThirdPartyConfigurationPayload: {
    clientMutationId: "String",
    thirdPartyConfiguration: "ThirdPartyConfiguration",
  },
  User: {
    agreedToProviderTos: "Boolean",
    avatarUrl: "String",
    createdAt: "ISO8601DateTime",
    email: "String",
    enablePaidHobby: "Boolean",
    featureFlags: "String",
    hasNodeproxyApps: "Boolean",
    id: "ID",
    internalNumericId: "Int",
    lastRegion: "String",
    name: "String",
    organizations: "OrganizationConnection",
    personalOrganization: "Organization",
    trust: "OrganizationTrust",
    twoFactorProtection: "Boolean",
    username: "String",
  },
  UserCoupon: {
    createdAt: "ISO8601DateTime",
    id: "ID",
    organization: "Organization",
    updatedAt: "ISO8601DateTime",
  },
  VM: {
    attachedVolumes: "VolumeConnection",
    canary: "Boolean",
    checks: "CheckState",
    createdAt: "ISO8601DateTime",
    criticalCheckCount: "Int",
    desiredStatus: "String",
    events: "AllocationEvent",
    failed: "Boolean",
    healthy: "Boolean",
    id: "ID",
    idShort: "ID",
    latestVersion: "Boolean",
    passingCheckCount: "Int",
    privateIP: "String",
    recentLogs: "LogEntry",
    region: "String",
    restarts: "Int",
    status: "String",
    taskName: "String",
    totalCheckCount: "Int",
    transitioning: "Boolean",
    updatedAt: "ISO8601DateTime",
    version: "Int",
    warningCheckCount: "Int",
  },
  VMConnection: {
    activeCount: "Int",
    completeCount: "Int",
    edges: "VMEdge",
    failedCount: "Int",
    inactiveCount: "Int",
    lostCount: "Int",
    nodes: "VM",
    pageInfo: "PageInfo",
    pendingCount: "Int",
    runningCount: "Int",
    totalCount: "Int",
  },
  VMEdge: {
    cursor: "String",
    node: "VM",
  },
  VMSize: {
    cpuCores: "Float",
    maxMemoryMb: "Int",
    memoryGb: "Float",
    memoryIncrementsMb: "Int",
    memoryMb: "Int",
    name: "String",
    priceMonth: "Float",
    priceSecond: "Float",
  },
  ValidateWireGuardPeersPayload: {
    clientMutationId: "String",
    invalidPeerIps: "String",
    validPeerIps: "String",
  },
  Volume: {
    app: "App",
    attachedAllocation: "Allocation",
    attachedAllocationId: "String",
    attachedMachine: "Machine",
    createdAt: "ISO8601DateTime",
    encrypted: "Boolean",
    host: "Host",
    id: "ID",
    internalId: "String",
    name: "String",
    region: "String",
    sizeGb: "Int",
    snapshots: "VolumeSnapshotConnection",
    state: "String",
    status: "String",
    usedBytes: "BigInt",
  },
  VolumeConnection: {
    edges: "VolumeEdge",
    nodes: "Volume",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  VolumeEdge: {
    cursor: "String",
    node: "Volume",
  },
  VolumeSnapshot: {
    createdAt: "ISO8601DateTime",
    digest: "String",
    id: "ID",
    size: "BigInt",
    volume: "Volume",
  },
  VolumeSnapshotConnection: {
    edges: "VolumeSnapshotEdge",
    nodes: "VolumeSnapshot",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  VolumeSnapshotEdge: {
    cursor: "String",
    node: "VolumeSnapshot",
  },
  WireGuardPeer: {
    id: "ID",
    name: "String",
    network: "String",
    peerip: "String",
    pubkey: "String",
    region: "String",
  },
  WireGuardPeerConnection: {
    edges: "WireGuardPeerEdge",
    nodes: "WireGuardPeer",
    pageInfo: "PageInfo",
    totalCount: "Int",
  },
  WireGuardPeerEdge: {
    cursor: "String",
    node: "WireGuardPeer",
  },
};

export const Ops = {
  query: "Queries" as const,
  mutation: "Mutations" as const,
};
